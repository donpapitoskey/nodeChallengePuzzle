"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_express_1 = require("apollo-server-express");
var schemas = apollo_server_express_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  \n  # User Types\n  \n  type User {\n    id: ID\n    name: String\n    email: String\n    password: String\n  }\n \n  type Token {\n    token: String\n  }\n\n  input UserInput {\n    name: String!\n    email: String!\n    password: String!\n  }\n\n  input LoginInput {\n    email: String!\n    password: String!\n  }\n\n  \n  # Category Types\n\n  type Category {\n    id: ID \n    name: String!\n    recipes: [Recipe]\n  }\n\n  input CategoryInput { \n    name: String\n  } \n\n  # Recipe Types\n\n  type Recipe  {\n    id: ID! \n    name: String\n    description: String\n    ingredients: [String!]\n    category: Category\n  }\n\n  input RecipeInput {\n    name: String!\n    ingredients: [String!]\n    description: String!\n    category: ID!\n  }\n\n  input RecipeInputFiltering {\n    name: String\n    ingredients: [String]\n    category: ID\n  }\n\n  type Query {\n    greetings: String\n    getCategories: [Category]!\n    getOneCategory(id: ID!): Category\n    getRecipes(filtering: RecipeInputFiltering): [Recipe]\n    getOneRecipe(id: ID!): Recipe\n    getMyRecipes: [Recipe]\n  }\n\n  type Mutation {\n    signUp(input: UserInput): User\n    login(input: LoginInput): Token\n    createCategory(input: CategoryInput!): Category\n    updateCategory(id: ID!, input: CategoryInput!): Category\n    deleteCategory(id: ID!): String\n    createRecipe(input: RecipeInput!): Recipe\n    updateRecipe(id: ID!, input: RecipeInput!): Recipe\n    deleteRecipe(id: ID!): String\n    addToMyRecipes(id: ID!): Recipe\n    removeFromMyRecipes(id: ID!): String\n  }\n  \n"], ["\n  \n  # User Types\n  \n  type User {\n    id: ID\n    name: String\n    email: String\n    password: String\n  }\n \n  type Token {\n    token: String\n  }\n\n  input UserInput {\n    name: String!\n    email: String!\n    password: String!\n  }\n\n  input LoginInput {\n    email: String!\n    password: String!\n  }\n\n  \n  # Category Types\n\n  type Category {\n    id: ID \n    name: String!\n    recipes: [Recipe]\n  }\n\n  input CategoryInput { \n    name: String\n  } \n\n  # Recipe Types\n\n  type Recipe  {\n    id: ID! \n    name: String\n    description: String\n    ingredients: [String!]\n    category: Category\n  }\n\n  input RecipeInput {\n    name: String!\n    ingredients: [String!]\n    description: String!\n    category: ID!\n  }\n\n  input RecipeInputFiltering {\n    name: String\n    ingredients: [String]\n    category: ID\n  }\n\n  type Query {\n    greetings: String\n    getCategories: [Category]!\n    getOneCategory(id: ID!): Category\n    getRecipes(filtering: RecipeInputFiltering): [Recipe]\n    getOneRecipe(id: ID!): Recipe\n    getMyRecipes: [Recipe]\n  }\n\n  type Mutation {\n    signUp(input: UserInput): User\n    login(input: LoginInput): Token\n    createCategory(input: CategoryInput!): Category\n    updateCategory(id: ID!, input: CategoryInput!): Category\n    deleteCategory(id: ID!): String\n    createRecipe(input: RecipeInput!): Recipe\n    updateRecipe(id: ID!, input: RecipeInput!): Recipe\n    deleteRecipe(id: ID!): String\n    addToMyRecipes(id: ID!): Recipe\n    removeFromMyRecipes(id: ID!): String\n  }\n  \n"])));
exports.default = schemas;
var templateObject_1;
//# sourceMappingURL=schemas.js.map